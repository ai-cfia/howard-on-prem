# General configuration shared across resources
app:
  # Mode determines if chart should deploy a full Dashboard with all containers or just the API.
  # - dashboard - deploys all the containers
  # - api - deploys just the API
  mode: 'dashboard'
  settings:
    ## Global dashboard settings
    global:
    # Cluster name that appears in the browser window title if it is set
    clusterName: "howard-on-prem"
    # Max number of items that can be displayed on each list page
    itemsPerPage: 10
    # Max number of labels that are displayed by default on most views.
    labelsLimit: 3
    # Number of seconds between every auto-refresh of logs
    logsAutoRefreshTimeInterval: 5
    # Number of seconds between every auto-refresh of every resource. Set 0 to disable
    resourceAutoRefreshTimeInterval: 10
    # Hide all access denied warnings in the notification panel
    disableAccessDeniedNotifications: false
    # Hide all namespaces option in namespace selection dropdown to avoid accidental selection in large clusters thus preventing OOM errors
    hideAllNamespaces: false
    # Namespace that should be selected by default after logging in.
    defaultNamespace: kube-system
    # List of namespaces that should be presented to user without namespace list privileges.
    namespaceFallbackList:
      - default
    ## Pinned resources that will be displayed in dashboard's menu
    pinnedResources: []
    # - kind: customresourcedefinition
    #  #  Fully qualified name of a CRD
    #  name: prometheus.monitoring.coreos.com
    #  #  Display name
    #  displayName: Prometheus
    #  #  Is this CRD namespaced?
    #  namespaced: true
  ingress:
    enabled: false
    hosts:
      # Keep 'localhost' host only if you want to access Dashboard using 'kubectl port-forward ...' on:
      # https://localhost:8443
      - ""
    ingressClassName: cilium
    # Use only if your ingress controllers support default ingress classes.
    # If set to true ingressClassName will be ignored and not added to the Ingress resources.
    # It should fall back to using IngressClass marked as the default.
    useDefaultIngressClass: false
    # This will append our Ingress with annotations required by our default configuration.
    #    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    #    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    useDefaultAnnotations: false
    pathType: ImplementationSpecific
    # If path is not the default (/), rewrite-target annotation will be added to the Ingress.
    # It allows serving Kubernetes Dashboard on a sub-path. Make sure that the configured path
    # does not conflict with gateway route configuration.
    path: /
    issuer:
      name: selfsigned
      # Scope determines what kind of issuer annotation will be used on ingress resource
      # - default - adds 'cert-manager.io/issuer'
      # - cluster - adds 'cert-manager.io/cluster-issuer'
      # - disabled - disables cert-manager annotations
      scope: disabled
    tls:
      enabled: false
      # If provided it will override autogenerated secret name
      secretName: ""
    labels: {}
    annotations:
      lbipam.cilium.io/ips: 10.140.79.27
      ingress.cilium.io/loadbalancer-mode: dedicated

# Auth deployment configuration
auth:
  containers:
    # TODO: Validate configuration
    args: []
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi

# API deployment configuration
api:
  containers:
    # TODO: Validate configuration
    args: []
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi

# WEB UI deployment configuration
web:
  container:
    # Additional container arguments
    # Full list of arguments: https://github.com/kubernetes/dashboard/blob/master/docs/common/arguments.md
    args:
      - --system-banner="howard-on-prem kubernetes dashboard"
    # TODO: Validate configuration
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi

### Metrics Scraper
### Container to scrape, store, and retrieve a window of time from the Metrics Server.
### refs: https://github.com/kubernetes/dashboard/tree/master/modules/metrics-scraper
metricsScraper:
  enabled: true
  containers:
    args:
      - --metric-duration=60m0s
    volumeMounts:
      - mountPath: /tmp
        name: metrics-storage
    # TODO: Validate configuration
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
      limits:
        cpu: 250m
        memory: 400Mi
  volumes:
    # See: https://github.com/kubernetes/dashboard/issues/9654
    # - name: metrics-storage
    #   persistentVolumeClaim:
    #     claimName: metrics-scraper-pvc
    - name: metrics-storage
      emptyDir: {}
    

## Required Kong sub-chart with DBless configuration to act as a gateway
## for our all containers.
## https://github.com/kubernetes/dashboard/issues/8972
kong:
  enabled: false

## Optional Cert Manager sub-chart configuration
## Enable this if you don't already have cert-manager enabled on your cluster.
cert-manager:
  enabled: false
  installCRDs: false

## Optional Nginx Ingress sub-chart configuration
## Enable this if you don't already have nginx-ingress enabled on your cluster.
nginx:
  enabled: false
