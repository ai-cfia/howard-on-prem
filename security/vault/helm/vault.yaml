# Vault Helm chart Value Overrides
global:
  enabled: true
  tlsDisable: false
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 256Mi
      cpu: 250m


injector:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: type
                operator: In
                values:
                  - app-worker

server:
  # Use the free Image
  image:
    repository: "hashicorp/vault"
    tag: "1.18.1"

  extraSecretEnvironmentVars: []
    # - envName: VAULT_TOKEN
    #   secretName: vault-transit-token
    #   secretKey: VAULT_TOKEN

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: type
                operator: In
                values:
                  - app-worker

  # These Resource Limits are in line with node requirements in the
  # Vault Reference Architecture for a Small Cluster
  # resources:
  #   requests:
  #     memory: 8Gi
  #     cpu: 2000m
  #   limits:
  #     memory: 16Gi
  #     cpu: 2000m

  # For HA configuration and because we need to manually init the vault,
  # we need to define custom readiness/liveness Probe settings
  readinessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
  livenessProbe:
    enabled: true
    path: "/v1/sys/health?standbyok=true"
    initialDelaySeconds: 60

  # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
  # used to include variables required for auto-unseal.
  # This was created using:
  # kubectl --namespace vault create secret tls tls-ca --cert ./tls-ca.cert
  # kubectl --namespace vault create secret tls tls-server --cert ./tls-server.cert --key ./tls-server.key
  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-ha-tls/ca.crt
    VAULT_TLSCERT: /vault/userconfig/vault-ha-tls/tls.crt
    VAULT_TLSKEY: /vault/userconfig/vault-ha-tls/tls.key

  # extraVolumes is a list of extra volumes to mount. These will be exposed
  # to Vault in the path `/vault/userconfig/<name>/`.
  # Deprecated: please use 'volumes' instead.
  extraVolumes: []
    # - type: secret
    #   name: vault-ha-tls
    # - type: secret
    #   name: tls-ca


  # volumes is a list of volumes made available to all containers. These are rendered
  # via toYaml rather than pre-processed like the extraVolumes value.
  # The purpose is to make it easy to share volumes between containers.
  volumes:
    - name: userconfig-vault-ha-tls
      secret:
        defaultMode: 420
        secretName: vault-ha-tls

  # volumeMounts is a list of volumeMounts for the main server container. These are rendered
  # via toYaml rather than pre-processed like the extraVolumes value.
  # The purpose is to make it easy to share volumes between containers.
  volumeMounts:
    - mountPath: /vault/userconfig/vault-ha-tls
      name: userconfig-vault-ha-tls
      readOnly: true

  # This configures the Vault Statefulset to create a PVC for audit logs.
  # See https://www.vaultproject.io/docs/audit/index.html to know more
  dataStorage:
    enabled: true
    size: 20Gi
    storageClass: ceph-hot-block
  
  auditStorage:
    enabled: true
    size: 20Gi
    storageClass: ceph-hot-block

  standalone:
    enabled: false

  # Run Vault in "HA" mode.
  ha:
    enabled: true
    replicas: 2
    raft:
      enabled: true
      setNodeId: true

      config: |
        ui = true
        cluster_name = "vault-integrated-storage"
        listener "tcp" {
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          tls_disable = 0
          tls_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-ha-tls/tls.key"
          tls_client_ca_file = "/vault/userconfig/vault-ha-tls/ca.ca"
        }

        storage "raft" {
          path = "/vault/data"
          retry_join {
            leader_api_addr = "https://vault-0.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-ha-tls/tls.key"
          }
          retry_join {
            leader_api_addr = "https://vault-1.vault-internal:8200"
            leader_ca_cert_file = "/vault/userconfig/vault-ha-tls/ca.crt"
            leader_client_cert_file = "/vault/userconfig/vault-ha-tls/tls.crt"
            leader_client_key_file = "/vault/userconfig/vault-ha-tls/tls.key"
          }
        }
  
  # Ingress allows ingress services to be created to allow external access
  # from Kubernetes to access Vault pods.
  # If deployment is on OpenShift, the following block is ignored.
  # In order to expose the service, use the route section below
  ingress:
    enabled: false
    labels: {}
      # traffic: external
    annotations:
      # cert-manager.io/cluster-issuer: letsencrypt-prod
      # ingress.cilium.io/force-https: enabled

    # Optionally use ingressClassName instead of deprecated annotation.
    # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation
    ingressClassName: "cilium"

    # As of Kubernetes 1.19, all Ingress Paths must have a pathType configured. The default value below should be sufficient in most cases.
    # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types for other possible values.
    pathType: Prefix

    # When HA mode is enabled and K8s service registration is being used,
    # configure the ingress to point to the Vault active service.
    activeService: true
    hosts:
      - host: chart-example.local
        paths: []
    ## Extra paths to prepend to the host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         number: use-annotation
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# Vault UI
ui:
  enabled: true
  serviceType: "ClusterIP"
  serviceNodePort: null
  externalPort: 8200
